---
AWSTemplateFormatVersion: 2010-09-09
Description: RolyPoly Counter

Parameters:
  BucketName:
    Type: String
    Description: A name for the bucket.
  AcmCertificateArn:
    Type: String
    Description: The ARN of ACM certificate.
  Subdomain:
    Type: String
    Description: The sub domain for app
    Default: roly-poly-counter
  HostedZoneName:
    Type: String
    Description: The name of Route53 Hosted zone
  GitHubOrgName:
    Type: String
    Description: The name of GitHub organization
  GitHubRepoName:
    Type: String
    Description: The name of GitHub repository
  GoogleClientId:
    Type: String
    Description: The ID of Google OAuth client ID
  GoogleClientSecret:
    Type: String
    Description: The secret of Google OAuth client

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedMethods:
              - HEAD
              - GET
              - PUT
              - POST
              - DELETE
            AllowedHeaders:
              - '*'
      LifecycleConfiguration:
        Rules:
          - Id: NoncurrentVersionExpiration
            Status: Enabled
            NoncurrentVersionExpirationInDays: 45
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Id: !Sub '${AWS::StackName}-BucketPolicy'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action:
              - s3:GetObject
            Resource:
              - !Join ['/', [!GetAtt S3Bucket.Arn, '*']]
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action:
              - s3:ListBucket
            Resource:
              - !GetAtt S3Bucket.Arn

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        Comment: !Sub '${AWS::StackName}-distribution'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          AllowedMethods:
            - GET
            - HEAD
          ViewerProtocolPolicy: redirect-to-https
        Aliases:
          - !Sub ${Subdomain}.${HostedZoneName}
        ViewerCertificate:
          SslSupportMethod: sni-only
          AcmCertificateArn: !Ref AcmCertificateArn

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'CloudFront OAI'

  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        UnusedAccountValidityDays: 7
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UserPoolName: !Sub ${AWS::StackName}-pool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - profile
        - email
        - openid
      CallbackURLs:
        - !Sub https://${Subdomain}.${HostedZoneName}/
      ClientName: !Ref AWS::StackName
      GenerateSecret: false
      LogoutURLs:
        - !Sub https://${Subdomain}.${HostedZoneName}/logout.html
      RefreshTokenValidity: 30
      SupportedIdentityProviders:
        - !Ref UserPoolIdentityProvider
      UserPoolId: !Ref UserPool

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref AWS::StackName
      UserPoolId: !Ref UserPool

  UserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      AttributeMapping:
        email: 'email'
        username: 'sub'
        given_name: 'given_name'
        family_name: 'family_name'
        picture: 'picture'
        email_verified: 'email_verified'
        locale: 'locale'
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: 'openid email profile'
      ProviderName: Google
      ProviderType: Google
      UserPoolId: !Ref UserPool

  UnauthIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowClassicFlow: true
      AllowUnauthenticatedIdentities: true
      IdentityPoolName: !Sub ${AWS::StackName}-unauth-idp

  UnauthIdentityPoolAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref UnauthIdentityPool
      Roles:
        authenticated: !GetAtt AuthIdpRole.Arn
        unauthenticated: !GetAtt UnauthIdpRole.Arn

  AuthIdpRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-AuthIdpRole'
      Description: !Sub '${AWS::StackName}-AuthIdpRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref UnauthIdentityPool
              ForAnyValue:StringLike:
                'cognito-identity.amazonaws.com:amr': 'authenticated'
      ManagedPolicyArns:
        - !Ref UnauthIdpPolicy

  UnauthIdpRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-UnauthIdpRole'
      Description: !Sub '${AWS::StackName}-UnauthIdpRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref UnauthIdentityPool
              ForAnyValue:StringLike:
                'cognito-identity.amazonaws.com:amr': 'unauthenticated'
      ManagedPolicyArns:
        - !Ref UnauthIdpPolicy

  UnauthIdpPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-UnauthIdpPolicy'
      Description: !Sub '${AWS::StackName}-UnauthIdpPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'mobileanalytics:PutEvents'
              - 'cognito-sync:*'
            Resource: '*'
          - Effect: Allow
            Action:
              - 's3:DeleteObject'
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource:
              - !Join ['/', [!GetAtt S3Bucket.Arn, 'data', '*']]

  DeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-DeployRole'
      Description: !Sub '${AWS::StackName}-DeployRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringLike:
                'token.actions.githubusercontent.com:sub': !Sub 'repo:${GitHubOrgName}/${GitHubRepoName}:*'
      ManagedPolicyArns:
        - !Ref DeployPolicy

  DeployPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-DeployPolicy'
      Description: !Sub '${AWS::StackName}-DeployPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:ListBucket'
            Resource:
              - !GetAtt S3Bucket.Arn
          - Effect: Allow
            Action:
              - 's3:DeleteObject'
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource:
              - !Join ['/', [!GetAtt S3Bucket.Arn, '*']]

  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub ${Subdomain}.${HostedZoneName}
      HostedZoneName: !Sub ${HostedZoneName}.
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontDistribution.DomainName

Outputs:
  Name:
    Description: Stack Name
    Value: !Ref AWS::StackName

  BucketName:
    Description: S3 Bucket Name
    Value: !Ref S3Bucket

  DistributionId:
    Description: CloudFront distribution ID
    Value: !Ref CloudFrontDistribution
